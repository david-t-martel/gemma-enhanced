[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gemma-cli"
version = "0.4.0"
description = "Enhanced CLI wrapper for Gemma inference with RAG-Redis integration and MCP support"
authors = [
    {name = "Gemma CLI Team", email = "gemma-cli@example.com"}
]
readme = "README_enhanced_cli.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["gemma", "llm", "inference", "rag", "mcp", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core CLI dependencies
    "click>=8.1.7",
    "rich>=13.7.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "psutil>=5.9.0",

    # Configuration
    "PyYAML>=6.0",
    "tomli-w>=1.0.0",
    "toml>=0.10.2",

    # Async support
    "aioredis>=2.0.1",
    "aiofiles>=23.2.1",
    "aioconsole>=0.7.0",

    # Data processing
    "numpy>=1.24.0",
    "redis[hiredis]>=5.0.0",

    # Terminal enhancements
    "prompt-toolkit>=3.0.43",
    "colorama>=0.4.6",

    # MCP Integration
    "mcp>=0.9.0",

    # RAG support
    "sentence-transformers>=2.2.0",
    "tiktoken>=0.5.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",

    # Linting and formatting
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.7.0",

    # Type stubs
    "types-redis>=4.6.0",
    "types-toml>=0.10.8",
    "types-PyYAML>=6.0.12",
    "pyte>=0.8.1",
    "playwright>=1.39.0",
]

ml = [
    # Machine learning dependencies
    "torch>=2.0.0",
    "transformers>=4.30.0",
]

fast-embedding = [
    "onnxruntime>=1.16.0",  # For ONNX-based embeddings
]

ffi = [
    # "rag-redis-system>=0.1.0",  # Rust FFI bindings (commented out - not available yet)
]

all = [
    "gemma-cli[dev,ml,fast-embedding]",  # Removed ffi from all until rag-redis-system is available
]

[project.scripts]
gemma-cli = "gemma_cli.cli:main"
gemma = "gemma_cli.cli:main"

[project.urls]
Homepage = "https://github.com/gemma-cpp/gemma-enhanced"
Repository = "https://github.com/gemma-cpp/gemma-enhanced"
Documentation = "https://github.com/gemma-cpp/gemma-enhanced/docs"
Issues = "https://github.com/gemma-cpp/gemma-enhanced/issues"

# ==========================================================================
# Tool Configuration: Ruff
# ==========================================================================
[tool.ruff]
target-version = "py311"
line-length = 100
indent-width = 4

# File discovery
extend-exclude = [
    "build/",
    "build-*/",
    "*_deps/",
    "third_party/",
    "*.generated.py",
    "__pycache__/",
    ".git/",
    ".pytest_cache/",
    ".ruff_cache/",
    ".venv/",
    "venv/",
    "node_modules/",
    "gemma.cpp/build*/",
]

include = ["*.py", "*.pyi", "**/pyproject.toml"]

# Linting rules
[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "ANN",   # flake8-annotations
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "SIM",   # flake8-simplify
    "PTH",   # flake8-use-pathlib
    "ASYNC", # flake8-async
    "S",     # flake8-bandit (security)
    "ARG",   # flake8-unused-arguments
    "RET",   # flake8-return
    "RUF",   # Ruff-specific rules
]

ignore = [
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
    "ANN401",  # Dynamically typed expressions (Any)
    "E501",    # Line too long (handled by formatter)
    "S101",    # Use of assert (common in tests)
    "S105",    # Possible hardcoded password (false positives in tests)
    "S106",    # Possible hardcoded password in function argument
    "S602",    # Subprocess without shell=False validation
]

# Auto-fix configuration
fix = true
fixable = ["ALL"]
unfixable = []

# Show fixes in output
show-fixes = true

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ANN",     # No type annotations required in tests
    "ARG",     # Unused arguments OK in test fixtures
    "S101",    # Assert statements allowed in tests
    "S105",    # Hardcoded passwords OK in tests
    "S106",    # Hardcoded passwords OK in tests
    "PLR2004", # Magic value comparisons OK in tests
]
"scripts/**/*.py" = [
    "T201",    # Print statements allowed in scripts
    "S602",    # Subprocess usage allowed in scripts
]
"**/__init__.py" = [
    "F401",    # Unused imports OK in __init__.py (re-exports)
]

# Linting rule configuration
[tool.ruff.lint.isort]
known-first-party = ["gemma_cli"]
force-single-line = false
force-sort-within-sections = true
lines-after-imports = 2

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["i", "j", "k", "x", "y", "z", "T", "N"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

# Formatting configuration
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 88

# ==========================================================================
# Tool Configuration: MyPy
# ==========================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true
follow_imports = "normal"
ignore_missing_imports = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Per-module overrides
[[tool.mypy.overrides]]
module = [
    "redis.*",
    "aioredis.*",
    "sentence_transformers.*",
    "mcp.*",
    "torch.*",
    "transformers.*",
    "tiktoken.*",
    "prompt_toolkit.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# ==========================================================================
# Tool Configuration: Pytest
# ==========================================================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=src/gemma_cli",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
    "-ra",
    "--color=yes",
    "--boxed",
]

markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests",
]

# ==========================================================================
# Tool Configuration: Coverage
# ==========================================================================
[tool.coverage.run]
source = ["src/gemma_cli"]
branch = true
parallel = true
omit = [
    "tests/*",
    "**/__pycache__/*",
    "**/site-packages/*",
    "**/.venv/*",
    "**/venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 85
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "class .*\\bProtocol\\):",
    "@overload",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ==========================================================================
# Tool Configuration: Black (if used alongside Ruff)
# ==========================================================================
[tool.black]
line-length = 100
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | third_party
)/
'''

# ==========================================================================
# Tool Configuration: Setuptools
# ==========================================================================
[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
include = ["gemma_cli*"]
namespaces = false

[tool.setuptools.package-data]
gemma_cli = ["py.typed", "*.toml", "*.yaml", "*.json"]
