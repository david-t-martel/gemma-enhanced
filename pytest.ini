[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Asyncio mode
asyncio_mode = auto

# Output and formatting
addopts =
    -v
    --strict-markers
    --tb=short
    --color=yes
    --durations=10
    --maxfail=1
    -ra

# Coverage (uncomment to enable)
# addopts =
#     --cov=src/gemma_cli
#     --cov-report=term-missing
#     --cov-report=html
#     --cov-fail-under=85

# Markers for categorizing tests
markers =
    unit: Unit tests (fast, isolated, no external dependencies)
    integration: Integration tests (multiple components, may use external services)
    slow: Tests that take more than 1 second to run
    asyncio: Tests that use async/await
    redis: Tests that require Redis connection
    model: Tests that require actual model files
    subprocess: Tests that spawn subprocesses
    mcp: Tests for MCP client functionality
    rag: Tests for RAG/memory system
    ui: Tests for UI components
    config: Tests for configuration management
    onboarding: Tests for onboarding system
    performance: Performance and benchmark tests
    smoke: Quick smoke tests for basic functionality
    regression: Regression tests for known bugs

# Filtering
# Run with: pytest -m "unit and not slow"
#          pytest -m "integration"
#          pytest -m "not redis"

# Timeout (requires pytest-timeout)
# timeout = 30
# timeout_method = thread

# Warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] [%(filename)s:%(lineno)d] %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Minimum Python version
minversion = 3.10

# Parallel execution (requires pytest-xdist)
# Run with: pytest -n auto
# addopts = -n auto

# Test order (requires pytest-randomly)
# Randomize test order to catch hidden dependencies
# Run with: pytest --randomly-seed=1234
# addopts = --randomly-seed=last

# Directories to ignore
norecursedirs =
    .git
    .venv
    venv
    env
    __pycache__
    *.egg-info
    dist
    build
    node_modules
    .taskmaster
    .claude

# Console output
console_output_style = progress

# pytest-asyncio configuration
asyncio_default_fixture_loop_scope = function
