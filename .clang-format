# Clang-Format configuration for gemma.cpp enhanced project
# Based on Google style with optimizations for modern C++20 and SIMD code

---
Language: Cpp
BasedOnStyle: Google

# ==========================================================================
# Basic Formatting
# ==========================================================================
AccessModifierOffset: -2
AlignAfterOpenBracket: Align
AlignArrayOfStructures: Right
AlignConsecutiveAssignments:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
  AlignCompound: true
  PadOperators: true
AlignConsecutiveBitFields:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
AlignConsecutiveDeclarations:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
AlignConsecutiveMacros:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
AlignEscapedNewlines: Left
AlignOperands: Align
AlignTrailingComments:
  Kind: Always
  OverEmptyLines: 0

# ==========================================================================
# Indentation and Spacing
# ==========================================================================
IndentWidth: 2
TabWidth: 2
UseTab: Never
ContinuationIndentWidth: 4
IndentCaseLabels: true
IndentCaseBlocks: false
IndentGotoLabels: true
IndentPPDirectives: None
IndentExternBlock: AfterExternBlock
IndentRequiresClause: true
IndentWrappedFunctionNames: false

# ==========================================================================
# Line Length and Breaking
# ==========================================================================
ColumnLimit: 100
MaxEmptyLinesToKeep: 2
KeepEmptyLinesAtTheStartOfBlocks: false

# Function and parameter formatting
AllowAllArgumentsOnNextLine: true
AllowAllParametersOfDeclarationOnNextLine: true
AllowShortBlocksOnASingleLine: Empty
AllowShortCaseLabelsOnASingleLine: false
AllowShortEnumsOnASingleLine: true
AllowShortFunctionsOnASingleLine: Empty
AllowShortIfStatementsOnASingleLine: Never
AllowShortLambdasOnASingleLine: All
AllowShortLoopsOnASingleLine: false

# ==========================================================================
# Breaking and Wrapping
# ==========================================================================
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: true
AlwaysBreakTemplateDeclarations: Yes
BinPackArguments: true
BinPackParameters: true

BreakBeforeBinaryOperators: None
BreakBeforeBraces: Attach
BreakBeforeConceptDeclarations: Always
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: BeforeColon
BreakInheritanceList: BeforeColon
BreakStringLiterals: true

# ==========================================================================
# Template and Modern C++ Features
# ==========================================================================
BreakAfterAttributes: Never
AttributeMacros:
  - '__attribute__'
  - 'HWY_ATTR'
  - 'HWY_API'
  - 'HWY_INLINE'
  - 'HWY_NOINLINE'

# Template formatting for heavy template usage in gemma.cpp
SpacesInAngles: Never
AlwaysBreakTemplateDeclarations: Yes
BreakBeforeConceptDeclarations: Always

# ==========================================================================
# Function and Method Formatting
# ==========================================================================
AlignAfterOpenBracket: Align
AllowAllParametersOfDeclarationOnNextLine: true
BinPackParameters: false  # Force one parameter per line for better readability

# Constructor initializer lists
BreakConstructorInitializers: BeforeColon
ConstructorInitializerIndentWidth: 4
ConstructorInitializerAllOnOneLineOrOnePerLine: true

# ==========================================================================
# Spacing Rules
# ==========================================================================
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: true
SpaceAroundPointerQualifiers: Default
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: ControlStatements
SpaceBeforeParensOptions:
  AfterControlStatements: true
  AfterForeachMacros: true
  AfterFunctionDefinitionName: false
  AfterFunctionDeclarationName: false
  AfterIfMacros: true
  AfterOverloadedOperator: false
  AfterRequiresInClause: false
  AfterRequiresInExpression: false
  BeforeNonEmptyParentheses: false
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 2
SpacesInCStyleCastParentheses: false
SpacesInConditionalStatement: false
SpacesInContainerLiterals: true
SpacesInParentheses: false
SpacesInSquareBrackets: false

# ==========================================================================
# Includes and Headers
# ==========================================================================
SortIncludes: CaseSensitive
SortUsingDeclarations: Lexicographic
IncludeBlocks: Preserve
IndentPPDirectives: None

# Include categories for gemma.cpp project structure
IncludeCategories:
  # System headers
  - Regex: '^<.*\.h>'
    Priority: 1
    SortPriority: 0
    CaseSensitive: false
  # C++ standard library
  - Regex: '^<.*>'
    Priority: 2
    SortPriority: 0
    CaseSensitive: false
  # Third-party libraries (Highway, SentencePiece, etc.)
  - Regex: '^"hwy/.*"'
    Priority: 3
    SortPriority: 0
    CaseSensitive: false
  - Regex: '^"sentencepiece/.*"'
    Priority: 3
    SortPriority: 0
    CaseSensitive: false
  # Project headers
  - Regex: '^"gemma.*"'
    Priority: 4
    SortPriority: 0
    CaseSensitive: false
  # Local headers
  - Regex: '^".*"'
    Priority: 5
    SortPriority: 0
    CaseSensitive: false

# ==========================================================================
# Comments and Documentation
# ==========================================================================
ReflowComments: true
CommentPragmas: '^ IWYU pragma:'
FixNamespaceComments: true

# ==========================================================================
# Macros and Preprocessor
# ==========================================================================
MacroBlockBegin: ''
MacroBlockEnd: ''
ForEachMacros:
  - 'HWY_FOREACH'
  - 'HWY_FOREACH_TARGET'

# ==========================================================================
# SIMD and Hardware-Specific Formatting
# ==========================================================================
# Custom formatting for Highway SIMD library patterns
StatementAttributeLikeMacros:
  - 'HWY_ATTR'
  - 'HWY_API'
  - 'HWY_INLINE'
  - 'HWY_NOINLINE'

WhitespaceSensitiveMacros:
  - 'STRINGIZE'
  - 'PP_STRINGIZE'
  - 'BOOST_PP_STRINGIZE'
  - 'NS_SWIFT_NAME'
  - 'CF_SWIFT_NAME'

# ==========================================================================
# Modern C++20 Features
# ==========================================================================
# Concepts and requires clauses
IndentRequiresClause: true
RequiresClausePosition: OwnLine
RequiresExpressionIndentation: OuterScope

# Structured bindings
Cpp11BracedListStyle: true

# ==========================================================================
# Performance-Critical Code Formatting
# ==========================================================================
# Optimize for readability in performance-critical sections
CompactNamespaces: false
NamespaceIndentation: None

# Lambda formatting for callback-heavy code
LambdaBodyIndentation: Signature
AllowShortLambdasOnASingleLine: All

# ==========================================================================
# Project-Specific Adjustments
# ==========================================================================
# Penalty system for line breaking decisions
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 1
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakOpenParenthesis: 0
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyIndentedWhitespace: 0
PenaltyReturnTypeOnItsOwnLine: 200

# ==========================================================================
# Disable for Generated Code
# ==========================================================================
DisableFormat: false
SortIncludes: CaseSensitive

---
# Special formatting for CUDA files
Language: Cpp
BasedOnStyle: Google
Standard: c++20

# CUDA-specific extensions
FileExtensions:
  - cu
  - cuh

# Adjust for CUDA kernel launches and device code
SpaceBeforeParens: ControlStatementsExceptControlMacros
SpacesInAngles: Never

---
# JSON formatting (for configuration files)
Language: Json
BasedOnStyle: None
IndentWidth: 2
TabWidth: 2
UseTab: Never